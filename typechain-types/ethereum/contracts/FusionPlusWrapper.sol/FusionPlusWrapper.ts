/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace FusionPlusWrapper {
  export type FusionOrderStruct = {
    escrowId: BytesLike;
    maker: AddressLike;
    targetAddress: AddressLike;
    amount: BigNumberish;
    sourceToken: AddressLike;
    destinationToken: AddressLike;
    hashlock: BytesLike;
    finalityDuration: BigNumberish;
    exclusiveDuration: BigNumberish;
    cancellationDuration: BigNumberish;
    nonce: BigNumberish;
    deadline: BigNumberish;
    sourceChain: string;
    destinationChain: string;
  };

  export type FusionOrderStructOutput = [
    escrowId: string,
    maker: string,
    targetAddress: string,
    amount: bigint,
    sourceToken: string,
    destinationToken: string,
    hashlock: string,
    finalityDuration: bigint,
    exclusiveDuration: bigint,
    cancellationDuration: bigint,
    nonce: bigint,
    deadline: bigint,
    sourceChain: string,
    destinationChain: string
  ] & {
    escrowId: string;
    maker: string;
    targetAddress: string;
    amount: bigint;
    sourceToken: string;
    destinationToken: string;
    hashlock: string;
    finalityDuration: bigint;
    exclusiveDuration: bigint;
    cancellationDuration: bigint;
    nonce: bigint;
    deadline: bigint;
    sourceChain: string;
    destinationChain: string;
  };

  export type EscrowDataStruct = {
    maker: AddressLike;
    resolver: AddressLike;
    targetAddress: AddressLike;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    token: AddressLike;
    hashlock: BytesLike;
    finalityLock: BigNumberish;
    exclusiveLock: BigNumberish;
    cancellationLock: BigNumberish;
    isSourceChain: boolean;
    completed: boolean;
    lopOrderHash: BytesLike;
  };

  export type EscrowDataStructOutput = [
    maker: string,
    resolver: string,
    targetAddress: string,
    amount: bigint,
    safetyDeposit: bigint,
    token: string,
    hashlock: string,
    finalityLock: bigint,
    exclusiveLock: bigint,
    cancellationLock: bigint,
    isSourceChain: boolean,
    completed: boolean,
    lopOrderHash: string
  ] & {
    maker: string;
    resolver: string;
    targetAddress: string;
    amount: bigint;
    safetyDeposit: bigint;
    token: string;
    hashlock: string;
    finalityLock: bigint;
    exclusiveLock: bigint;
    cancellationLock: bigint;
    isSourceChain: boolean;
    completed: boolean;
    lopOrderHash: string;
  };
}

export interface FusionPlusWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FUSION_ORDER_TYPEHASH"
      | "MIN_SAFETY_DEPOSIT"
      | "cancel"
      | "claimExclusive"
      | "claimPublic"
      | "createFusionOrder"
      | "eip712Domain"
      | "emergencyWithdraw"
      | "escrowCounter"
      | "escrows"
      | "fillFusionOrder"
      | "fusionOrders"
      | "getEscrow"
      | "getEscrowCount"
      | "getFusionOrder"
      | "getNonce"
      | "limitOrderProtocol"
      | "makerNonces"
      | "weth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "EscrowCompleted"
      | "EscrowCreatedViaLOP"
      | "FusionOrderCreated"
      | "SecretRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FUSION_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SAFETY_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "claimExclusive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPublic",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFusionOrder",
    values: [FusionPlusWrapper.FusionOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "fillFusionOrder",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fusionOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFusionOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrderProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makerNonces",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FUSION_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SAFETY_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFusionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillFusionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fusionOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFusionOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrderProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCompletedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    completer: AddressLike,
    wasClaimed: boolean
  ];
  export type OutputTuple = [
    escrowId: string,
    completer: string,
    wasClaimed: boolean
  ];
  export interface OutputObject {
    escrowId: string;
    completer: string;
    wasClaimed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedViaLOPEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    maker: AddressLike,
    resolver: AddressLike,
    amount: BigNumberish,
    isSourceChain: boolean,
    lopOrderHash: BytesLike
  ];
  export type OutputTuple = [
    escrowId: string,
    maker: string,
    resolver: string,
    amount: bigint,
    isSourceChain: boolean,
    lopOrderHash: string
  ];
  export interface OutputObject {
    escrowId: string;
    maker: string;
    resolver: string;
    amount: bigint;
    isSourceChain: boolean;
    lopOrderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FusionOrderCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    maker: AddressLike,
    sourceChain: string,
    destinationChain: string,
    amount: BigNumberish,
    lopOrderHash: BytesLike
  ];
  export type OutputTuple = [
    escrowId: string,
    maker: string,
    sourceChain: string,
    destinationChain: string,
    amount: bigint,
    lopOrderHash: string
  ];
  export interface OutputObject {
    escrowId: string;
    maker: string;
    sourceChain: string;
    destinationChain: string;
    amount: bigint;
    lopOrderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretRevealedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    secret: BytesLike,
    revealer: AddressLike
  ];
  export type OutputTuple = [
    escrowId: string,
    secret: string,
    revealer: string
  ];
  export interface OutputObject {
    escrowId: string;
    secret: string;
    revealer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FusionPlusWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): FusionPlusWrapper;
  waitForDeployment(): Promise<this>;

  interface: FusionPlusWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FUSION_ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  MIN_SAFETY_DEPOSIT: TypedContractMethod<[], [bigint], "view">;

  cancel: TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;

  claimExclusive: TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  claimPublic: TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  createFusionOrder: TypedContractMethod<
    [order: FusionPlusWrapper.FusionOrderStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  escrowCounter: TypedContractMethod<[], [bigint], "view">;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        maker: string;
        resolver: string;
        targetAddress: string;
        amount: bigint;
        safetyDeposit: bigint;
        token: string;
        hashlock: string;
        finalityLock: bigint;
        exclusiveLock: bigint;
        cancellationLock: bigint;
        isSourceChain: boolean;
        completed: boolean;
        lopOrderHash: string;
      }
    ],
    "view"
  >;

  fillFusionOrder: TypedContractMethod<
    [
      escrowId: BytesLike,
      safetyDeposit: BigNumberish,
      lopSignature: BytesLike,
      lopInteraction: BytesLike
    ],
    [void],
    "payable"
  >;

  fusionOrders: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        escrowId: string;
        maker: string;
        targetAddress: string;
        amount: bigint;
        sourceToken: string;
        destinationToken: string;
        hashlock: string;
        finalityDuration: bigint;
        exclusiveDuration: bigint;
        cancellationDuration: bigint;
        nonce: bigint;
        deadline: bigint;
        sourceChain: string;
        destinationChain: string;
      }
    ],
    "view"
  >;

  getEscrow: TypedContractMethod<
    [escrowId: BytesLike],
    [FusionPlusWrapper.EscrowDataStructOutput],
    "view"
  >;

  getEscrowCount: TypedContractMethod<[], [bigint], "view">;

  getFusionOrder: TypedContractMethod<
    [escrowId: BytesLike],
    [FusionPlusWrapper.FusionOrderStructOutput],
    "view"
  >;

  getNonce: TypedContractMethod<[maker: AddressLike], [bigint], "view">;

  limitOrderProtocol: TypedContractMethod<[], [string], "view">;

  makerNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FUSION_ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_SAFETY_DEPOSIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimExclusive"
  ): TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimPublic"
  ): TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFusionOrder"
  ): TypedContractMethod<
    [order: FusionPlusWrapper.FusionOrderStruct, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escrowCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        maker: string;
        resolver: string;
        targetAddress: string;
        amount: bigint;
        safetyDeposit: bigint;
        token: string;
        hashlock: string;
        finalityLock: bigint;
        exclusiveLock: bigint;
        cancellationLock: bigint;
        isSourceChain: boolean;
        completed: boolean;
        lopOrderHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fillFusionOrder"
  ): TypedContractMethod<
    [
      escrowId: BytesLike,
      safetyDeposit: BigNumberish,
      lopSignature: BytesLike,
      lopInteraction: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fusionOrders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        escrowId: string;
        maker: string;
        targetAddress: string;
        amount: bigint;
        sourceToken: string;
        destinationToken: string;
        hashlock: string;
        finalityDuration: bigint;
        exclusiveDuration: bigint;
        cancellationDuration: bigint;
        nonce: bigint;
        deadline: bigint;
        sourceChain: string;
        destinationChain: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [escrowId: BytesLike],
    [FusionPlusWrapper.EscrowDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFusionOrder"
  ): TypedContractMethod<
    [escrowId: BytesLike],
    [FusionPlusWrapper.FusionOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[maker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "limitOrderProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "makerNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCompleted"
  ): TypedContractEvent<
    EscrowCompletedEvent.InputTuple,
    EscrowCompletedEvent.OutputTuple,
    EscrowCompletedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreatedViaLOP"
  ): TypedContractEvent<
    EscrowCreatedViaLOPEvent.InputTuple,
    EscrowCreatedViaLOPEvent.OutputTuple,
    EscrowCreatedViaLOPEvent.OutputObject
  >;
  getEvent(
    key: "FusionOrderCreated"
  ): TypedContractEvent<
    FusionOrderCreatedEvent.InputTuple,
    FusionOrderCreatedEvent.OutputTuple,
    FusionOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SecretRevealed"
  ): TypedContractEvent<
    SecretRevealedEvent.InputTuple,
    SecretRevealedEvent.OutputTuple,
    SecretRevealedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EscrowCompleted(bytes32,address,bool)": TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;
    EscrowCompleted: TypedContractEvent<
      EscrowCompletedEvent.InputTuple,
      EscrowCompletedEvent.OutputTuple,
      EscrowCompletedEvent.OutputObject
    >;

    "EscrowCreatedViaLOP(bytes32,address,address,uint256,bool,bytes32)": TypedContractEvent<
      EscrowCreatedViaLOPEvent.InputTuple,
      EscrowCreatedViaLOPEvent.OutputTuple,
      EscrowCreatedViaLOPEvent.OutputObject
    >;
    EscrowCreatedViaLOP: TypedContractEvent<
      EscrowCreatedViaLOPEvent.InputTuple,
      EscrowCreatedViaLOPEvent.OutputTuple,
      EscrowCreatedViaLOPEvent.OutputObject
    >;

    "FusionOrderCreated(bytes32,address,string,string,uint256,bytes32)": TypedContractEvent<
      FusionOrderCreatedEvent.InputTuple,
      FusionOrderCreatedEvent.OutputTuple,
      FusionOrderCreatedEvent.OutputObject
    >;
    FusionOrderCreated: TypedContractEvent<
      FusionOrderCreatedEvent.InputTuple,
      FusionOrderCreatedEvent.OutputTuple,
      FusionOrderCreatedEvent.OutputObject
    >;

    "SecretRevealed(bytes32,bytes32,address)": TypedContractEvent<
      SecretRevealedEvent.InputTuple,
      SecretRevealedEvent.OutputTuple,
      SecretRevealedEvent.OutputObject
    >;
    SecretRevealed: TypedContractEvent<
      SecretRevealedEvent.InputTuple,
      SecretRevealedEvent.OutputTuple,
      SecretRevealedEvent.OutputObject
    >;
  };
}
