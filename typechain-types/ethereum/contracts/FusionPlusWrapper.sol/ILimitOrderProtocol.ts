/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ILimitOrderProtocol {
  export type OrderStruct = {
    salt: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    receiver: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    offsets: BigNumberish;
    interactions: BytesLike;
  };

  export type OrderStructOutput = [
    salt: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    receiver: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint,
    offsets: bigint,
    interactions: string
  ] & {
    salt: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
    offsets: bigint;
    interactions: string;
  };
}

export interface ILimitOrderProtocolInterface extends Interface {
  getFunction(
    nameOrSignature: "fillOrder" | "hashOrder" | "invalidateOrder" | "remaining"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      ILimitOrderProtocol.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [ILimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateOrder",
    values: [ILimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "remaining",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
}

export interface ILimitOrderProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): ILimitOrderProtocol;
  waitForDeployment(): Promise<this>;

  interface: ILimitOrderProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fillOrder: TypedContractMethod<
    [
      order: ILimitOrderProtocol.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  hashOrder: TypedContractMethod<
    [order: ILimitOrderProtocol.OrderStruct],
    [string],
    "view"
  >;

  invalidateOrder: TypedContractMethod<
    [order: ILimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;

  remaining: TypedContractMethod<[orderHash: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: ILimitOrderProtocol.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<
    [order: ILimitOrderProtocol.OrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "invalidateOrder"
  ): TypedContractMethod<
    [order: ILimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remaining"
  ): TypedContractMethod<[orderHash: BytesLike], [bigint], "view">;

  filters: {};
}
