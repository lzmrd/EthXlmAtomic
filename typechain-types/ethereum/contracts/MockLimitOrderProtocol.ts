/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MockLimitOrderProtocol {
  export type OrderStruct = {
    salt: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    receiver: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    offsets: BigNumberish;
    interactions: BytesLike;
  };

  export type OrderStructOutput = [
    salt: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    receiver: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint,
    offsets: bigint,
    interactions: string
  ] & {
    salt: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
    offsets: bigint;
    interactions: string;
  };
}

export interface MockLimitOrderProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fillOrder"
      | "getOrderInfo"
      | "hashOrder"
      | "initializeOrderForDemo"
      | "invalidateOrder"
      | "invalidated"
      | "isValidOrder"
      | "orderCounter"
      | "remaining"
      | "remainingAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OrderCancelled" | "OrderFilled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      MockLimitOrderProtocol.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [MockLimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeOrderForDemo",
    values: [MockLimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateOrder",
    values: [MockLimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrder",
    values: [MockLimitOrderProtocol.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remaining",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeOrderForDemo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [orderHash: BytesLike];
  export type OutputTuple = [orderHash: string];
  export interface OutputObject {
    orderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    makingAmount: BigNumberish,
    takingAmount: BigNumberish,
    maker: AddressLike,
    taker: AddressLike
  ];
  export type OutputTuple = [
    orderHash: string,
    makingAmount: bigint,
    takingAmount: bigint,
    maker: string,
    taker: string
  ];
  export interface OutputObject {
    orderHash: string;
    makingAmount: bigint;
    takingAmount: bigint;
    maker: string;
    taker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockLimitOrderProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): MockLimitOrderProtocol;
  waitForDeployment(): Promise<this>;

  interface: MockLimitOrderProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fillOrder: TypedContractMethod<
    [
      order: MockLimitOrderProtocol.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  getOrderInfo: TypedContractMethod<
    [orderHash: BytesLike],
    [[bigint, boolean] & { remainingAmount: bigint; isInvalidated: boolean }],
    "view"
  >;

  hashOrder: TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [string],
    "view"
  >;

  initializeOrderForDemo: TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;

  invalidateOrder: TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;

  invalidated: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  isValidOrder: TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [boolean],
    "view"
  >;

  orderCounter: TypedContractMethod<[], [bigint], "view">;

  remaining: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  remainingAmount: TypedContractMethod<
    [orderHash: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: MockLimitOrderProtocol.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getOrderInfo"
  ): TypedContractMethod<
    [orderHash: BytesLike],
    [[bigint, boolean] & { remainingAmount: bigint; isInvalidated: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashOrder"
  ): TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeOrderForDemo"
  ): TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invalidateOrder"
  ): TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invalidated"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidOrder"
  ): TypedContractMethod<
    [order: MockLimitOrderProtocol.OrderStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "remaining"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "remainingAmount"
  ): TypedContractMethod<[orderHash: BytesLike], [bigint], "view">;

  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;

  filters: {
    "OrderCancelled(bytes32)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OrderFilled(bytes32,uint256,uint256,address,address)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
  };
}
