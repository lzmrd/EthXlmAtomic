/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace FusionEscrow {
  export type OrderStruct = {
    escrowId: BytesLike;
    maker: AddressLike;
    targetAddress: AddressLike;
    amount: BigNumberish;
    token: AddressLike;
    hashlock: BytesLike;
    finalityDuration: BigNumberish;
    exclusiveDuration: BigNumberish;
    cancellationDuration: BigNumberish;
    nonce: BigNumberish;
  };

  export type OrderStructOutput = [
    escrowId: string,
    maker: string,
    targetAddress: string,
    amount: bigint,
    token: string,
    hashlock: string,
    finalityDuration: bigint,
    exclusiveDuration: bigint,
    cancellationDuration: bigint,
    nonce: bigint
  ] & {
    escrowId: string;
    maker: string;
    targetAddress: string;
    amount: bigint;
    token: string;
    hashlock: string;
    finalityDuration: bigint;
    exclusiveDuration: bigint;
    cancellationDuration: bigint;
    nonce: bigint;
  };

  export type EscrowDataStruct = {
    maker: AddressLike;
    resolver: AddressLike;
    targetAddress: AddressLike;
    amount: BigNumberish;
    safetyDeposit: BigNumberish;
    token: AddressLike;
    hashlock: BytesLike;
    finalityLock: BigNumberish;
    exclusiveLock: BigNumberish;
    cancellationLock: BigNumberish;
    depositPhase: boolean;
    completed: boolean;
  };

  export type EscrowDataStructOutput = [
    maker: string,
    resolver: string,
    targetAddress: string,
    amount: bigint,
    safetyDeposit: bigint,
    token: string,
    hashlock: string,
    finalityLock: bigint,
    exclusiveLock: bigint,
    cancellationLock: bigint,
    depositPhase: boolean,
    completed: boolean
  ] & {
    maker: string;
    resolver: string;
    targetAddress: string;
    amount: bigint;
    safetyDeposit: bigint;
    token: string;
    hashlock: string;
    finalityLock: bigint;
    exclusiveLock: bigint;
    cancellationLock: bigint;
    depositPhase: boolean;
    completed: boolean;
  };
}

export interface FusionEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ORDER_TYPEHASH"
      | "cancelExclusive"
      | "cancelPublic"
      | "claimExclusive"
      | "claimPublic"
      | "createDestinationEscrow"
      | "createSourceEscrow"
      | "createSourceEscrowWithSignature"
      | "eip712Domain"
      | "emergencyWithdraw"
      | "escrowCounter"
      | "escrows"
      | "getEscrow"
      | "getEscrowCount"
      | "getNonce"
      | "getSwapDirection"
      | "getWETHAddress"
      | "getWETHAddressTestnet"
      | "makerNonces"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DestinationEscrowCreated"
      | "EIP712DomainChanged"
      | "EscrowCancelledExclusive"
      | "EscrowCancelledPublic"
      | "EscrowClaimedExclusive"
      | "EscrowClaimedPublic"
      | "SourceEscrowCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExclusive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPublic",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExclusive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPublic",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDestinationEscrow",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSourceEscrow",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSourceEscrowWithSignature",
    values: [FusionEscrow.OrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrows", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getEscrow",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEscrowCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapDirection",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWETHAddressTestnet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makerNonces",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDestinationEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSourceEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSourceEscrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEscrowCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapDirection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWETHAddressTestnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerNonces",
    data: BytesLike
  ): Result;
}

export namespace DestinationEscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    maker: AddressLike,
    resolver: AddressLike,
    amount: BigNumberish,
    safetyDeposit: BigNumberish,
    finalityLock: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    maker: string,
    resolver: string,
    amount: bigint,
    safetyDeposit: bigint,
    finalityLock: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    maker: string;
    resolver: string;
    amount: bigint;
    safetyDeposit: bigint;
    finalityLock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledExclusiveEvent {
  export type InputTuple = [escrowId: BytesLike, resolver: AddressLike];
  export type OutputTuple = [escrowId: string, resolver: string];
  export interface OutputObject {
    escrowId: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledPublicEvent {
  export type InputTuple = [escrowId: BytesLike, caller: AddressLike];
  export type OutputTuple = [escrowId: string, caller: string];
  export interface OutputObject {
    escrowId: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowClaimedExclusiveEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    resolver: AddressLike,
    secret: BytesLike
  ];
  export type OutputTuple = [
    escrowId: string,
    resolver: string,
    secret: string
  ];
  export interface OutputObject {
    escrowId: string;
    resolver: string;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowClaimedPublicEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    caller: AddressLike,
    secret: BytesLike
  ];
  export type OutputTuple = [escrowId: string, caller: string, secret: string];
  export interface OutputObject {
    escrowId: string;
    caller: string;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SourceEscrowCreatedEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    maker: AddressLike,
    resolver: AddressLike,
    amount: BigNumberish,
    safetyDeposit: BigNumberish,
    finalityLock: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    maker: string,
    resolver: string,
    amount: bigint,
    safetyDeposit: bigint,
    finalityLock: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    maker: string;
    resolver: string;
    amount: bigint;
    safetyDeposit: bigint;
    finalityLock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FusionEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): FusionEscrow;
  waitForDeployment(): Promise<this>;

  interface: FusionEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ORDER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  cancelExclusive: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelPublic: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  claimExclusive: TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  claimPublic: TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  createDestinationEscrow: TypedContractMethod<
    [
      escrowId: BytesLike,
      maker: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      hashlock: BytesLike,
      finalityDuration: BigNumberish,
      exclusiveDuration: BigNumberish,
      cancellationDuration: BigNumberish
    ],
    [void],
    "payable"
  >;

  createSourceEscrow: TypedContractMethod<
    [
      escrowId: BytesLike,
      maker: AddressLike,
      targetAddress: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      hashlock: BytesLike,
      finalityDuration: BigNumberish,
      exclusiveDuration: BigNumberish,
      cancellationDuration: BigNumberish
    ],
    [void],
    "payable"
  >;

  createSourceEscrowWithSignature: TypedContractMethod<
    [order: FusionEscrow.OrderStruct, signature: BytesLike],
    [void],
    "payable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [escrowId: BytesLike],
    [void],
    "nonpayable"
  >;

  escrowCounter: TypedContractMethod<[], [bigint], "view">;

  escrows: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        maker: string;
        resolver: string;
        targetAddress: string;
        amount: bigint;
        safetyDeposit: bigint;
        token: string;
        hashlock: string;
        finalityLock: bigint;
        exclusiveLock: bigint;
        cancellationLock: bigint;
        depositPhase: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;

  getEscrow: TypedContractMethod<
    [escrowId: BytesLike],
    [FusionEscrow.EscrowDataStructOutput],
    "view"
  >;

  getEscrowCount: TypedContractMethod<[], [bigint], "view">;

  getNonce: TypedContractMethod<[maker: AddressLike], [bigint], "view">;

  getSwapDirection: TypedContractMethod<
    [sourceToken: AddressLike, destinationToken: AddressLike],
    [boolean],
    "view"
  >;

  getWETHAddress: TypedContractMethod<[], [string], "view">;

  getWETHAddressTestnet: TypedContractMethod<[], [string], "view">;

  makerNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ORDER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelExclusive"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelPublic"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimExclusive"
  ): TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimPublic"
  ): TypedContractMethod<
    [escrowId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDestinationEscrow"
  ): TypedContractMethod<
    [
      escrowId: BytesLike,
      maker: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      hashlock: BytesLike,
      finalityDuration: BigNumberish,
      exclusiveDuration: BigNumberish,
      cancellationDuration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSourceEscrow"
  ): TypedContractMethod<
    [
      escrowId: BytesLike,
      maker: AddressLike,
      targetAddress: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      hashlock: BytesLike,
      finalityDuration: BigNumberish,
      exclusiveDuration: BigNumberish,
      cancellationDuration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSourceEscrowWithSignature"
  ): TypedContractMethod<
    [order: FusionEscrow.OrderStruct, signature: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[escrowId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        maker: string;
        resolver: string;
        targetAddress: string;
        amount: bigint;
        safetyDeposit: bigint;
        token: string;
        hashlock: string;
        finalityLock: bigint;
        exclusiveLock: bigint;
        cancellationLock: bigint;
        depositPhase: boolean;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrow"
  ): TypedContractMethod<
    [escrowId: BytesLike],
    [FusionEscrow.EscrowDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEscrowCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[maker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSwapDirection"
  ): TypedContractMethod<
    [sourceToken: AddressLike, destinationToken: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWETHAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWETHAddressTestnet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "makerNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "DestinationEscrowCreated"
  ): TypedContractEvent<
    DestinationEscrowCreatedEvent.InputTuple,
    DestinationEscrowCreatedEvent.OutputTuple,
    DestinationEscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelledExclusive"
  ): TypedContractEvent<
    EscrowCancelledExclusiveEvent.InputTuple,
    EscrowCancelledExclusiveEvent.OutputTuple,
    EscrowCancelledExclusiveEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelledPublic"
  ): TypedContractEvent<
    EscrowCancelledPublicEvent.InputTuple,
    EscrowCancelledPublicEvent.OutputTuple,
    EscrowCancelledPublicEvent.OutputObject
  >;
  getEvent(
    key: "EscrowClaimedExclusive"
  ): TypedContractEvent<
    EscrowClaimedExclusiveEvent.InputTuple,
    EscrowClaimedExclusiveEvent.OutputTuple,
    EscrowClaimedExclusiveEvent.OutputObject
  >;
  getEvent(
    key: "EscrowClaimedPublic"
  ): TypedContractEvent<
    EscrowClaimedPublicEvent.InputTuple,
    EscrowClaimedPublicEvent.OutputTuple,
    EscrowClaimedPublicEvent.OutputObject
  >;
  getEvent(
    key: "SourceEscrowCreated"
  ): TypedContractEvent<
    SourceEscrowCreatedEvent.InputTuple,
    SourceEscrowCreatedEvent.OutputTuple,
    SourceEscrowCreatedEvent.OutputObject
  >;

  filters: {
    "DestinationEscrowCreated(bytes32,address,address,uint256,uint256,uint256)": TypedContractEvent<
      DestinationEscrowCreatedEvent.InputTuple,
      DestinationEscrowCreatedEvent.OutputTuple,
      DestinationEscrowCreatedEvent.OutputObject
    >;
    DestinationEscrowCreated: TypedContractEvent<
      DestinationEscrowCreatedEvent.InputTuple,
      DestinationEscrowCreatedEvent.OutputTuple,
      DestinationEscrowCreatedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EscrowCancelledExclusive(bytes32,address)": TypedContractEvent<
      EscrowCancelledExclusiveEvent.InputTuple,
      EscrowCancelledExclusiveEvent.OutputTuple,
      EscrowCancelledExclusiveEvent.OutputObject
    >;
    EscrowCancelledExclusive: TypedContractEvent<
      EscrowCancelledExclusiveEvent.InputTuple,
      EscrowCancelledExclusiveEvent.OutputTuple,
      EscrowCancelledExclusiveEvent.OutputObject
    >;

    "EscrowCancelledPublic(bytes32,address)": TypedContractEvent<
      EscrowCancelledPublicEvent.InputTuple,
      EscrowCancelledPublicEvent.OutputTuple,
      EscrowCancelledPublicEvent.OutputObject
    >;
    EscrowCancelledPublic: TypedContractEvent<
      EscrowCancelledPublicEvent.InputTuple,
      EscrowCancelledPublicEvent.OutputTuple,
      EscrowCancelledPublicEvent.OutputObject
    >;

    "EscrowClaimedExclusive(bytes32,address,bytes32)": TypedContractEvent<
      EscrowClaimedExclusiveEvent.InputTuple,
      EscrowClaimedExclusiveEvent.OutputTuple,
      EscrowClaimedExclusiveEvent.OutputObject
    >;
    EscrowClaimedExclusive: TypedContractEvent<
      EscrowClaimedExclusiveEvent.InputTuple,
      EscrowClaimedExclusiveEvent.OutputTuple,
      EscrowClaimedExclusiveEvent.OutputObject
    >;

    "EscrowClaimedPublic(bytes32,address,bytes32)": TypedContractEvent<
      EscrowClaimedPublicEvent.InputTuple,
      EscrowClaimedPublicEvent.OutputTuple,
      EscrowClaimedPublicEvent.OutputObject
    >;
    EscrowClaimedPublic: TypedContractEvent<
      EscrowClaimedPublicEvent.InputTuple,
      EscrowClaimedPublicEvent.OutputTuple,
      EscrowClaimedPublicEvent.OutputObject
    >;

    "SourceEscrowCreated(bytes32,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SourceEscrowCreatedEvent.InputTuple,
      SourceEscrowCreatedEvent.OutputTuple,
      SourceEscrowCreatedEvent.OutputObject
    >;
    SourceEscrowCreated: TypedContractEvent<
      SourceEscrowCreatedEvent.InputTuple,
      SourceEscrowCreatedEvent.OutputTuple,
      SourceEscrowCreatedEvent.OutputObject
    >;
  };
}
