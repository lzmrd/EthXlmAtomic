/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockLimitOrderProtocol,
  MockLimitOrderProtocolInterface,
} from "../../../ethereum/contracts/MockLimitOrderProtocol";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "makingAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "takingAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "taker",
        type: "address",
      },
    ],
    name: "OrderFilled",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "makerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowedSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "interactions",
            type: "bytes",
          },
        ],
        internalType: "struct MockLimitOrderProtocol.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "interaction",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "makingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "takingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skipPermitAndThresholdAmount",
        type: "uint256",
      },
    ],
    name: "fillOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "actualMakingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actualTakingAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "getOrderInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "remainingAmount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isInvalidated",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "makerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowedSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "interactions",
            type: "bytes",
          },
        ],
        internalType: "struct MockLimitOrderProtocol.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "hashOrder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "makerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowedSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "interactions",
            type: "bytes",
          },
        ],
        internalType: "struct MockLimitOrderProtocol.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "initializeOrderForDemo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "makerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowedSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "interactions",
            type: "bytes",
          },
        ],
        internalType: "struct MockLimitOrderProtocol.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "invalidateOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "invalidated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "makerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerAsset",
            type: "address",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowedSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "interactions",
            type: "bytes",
          },
        ],
        internalType: "struct MockLimitOrderProtocol.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "isValidOrder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "orderCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "remaining",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "remainingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610670908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081631c8002561461044e5750806322036cd51461039857806337e7316f1461037b5780633c065eda146103415780634fc5aee1146102f657806362e238bb1461014257806372cca3eb14610116578063768c6ec0146100dd578063b789bf52146100ba5763bc1ed74c1461009157600080fd5b346100b65760203660031901126100b657602092829135815280845220549051908152f35b8280fd5b5050346100d957816003193601126100d9576020906002549051908152f35b5080fd5b508290346100d95760203660031901126100d9573581528060205260ff8280832054926001602052205416825191825215156020820152f35b50346100b65760203660031901126100b6578160209360ff923581526001855220541690519015158152f35b5091906003199060c0368301126100b65783359167ffffffffffffffff908184116102f2576101409084360301126102ee576024358181116102f25761018b90369087016104aa565b50506044359081116102ee576101a490369086016104aa565b505060643592608435906101b98487016104ec565b938482526020916001835260ff85822054166102b75785815280835286858220541061027457858152808352848120805415610268575b8054918883039283116102555750556060965061020f906064016104d8565b83518681528383820152857f9e65b4d2acb37185da6f001f1ac35fd3e91f34686cbb0bd04e9505e68e6ce98386339460018060a01b031693a48251948552840152820152f35b634e487b7160e01b815260118a52602490fd5b60c483013581556101f0565b845162461bcd60e51b8152808901849052601d60248201527f496e73756666696369656e742072656d61696e696e6720616d6f756e740000006044820152606490fd5b845162461bcd60e51b8152808901849052601160248201527013dc99195c881a5b9d985b1a59185d1959607a1b6044820152606490fd5b8380fd5b8480fd5b5050346100d9579060209161031261030d36610472565b6104ec565b82526001835260ff8183205416159182610330575b50519015158152f35b819250808452205415159038610327565b5050346100d95761035136610472565b9061035b826104ec565b83528260205282209081541561036f578280f35b60c00135905538808280f35b5050346100d95760209061039161030d36610472565b9051908152f35b5090346100b6576103a836610472565b916103b2836104ec565b926001600160a01b03906103c8906060016104d8565b16330361040c575081835260016020528220600160ff198254161790557f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d8280a280f35b6020606492519162461bcd60e51b8352820152601960248201527f4f6e6c79206d616b65722063616e20696e76616c6964617465000000000000006044820152fd5b92919050346102ee5760203660031901126102ee5735835260208381529220548152f35b600319906020818301126104a5576004359167ffffffffffffffff83116104a55782610140920301126104a55760040190565b600080fd5b9181601f840112156104a55782359167ffffffffffffffff83116104a557602083818601950101116104a557565b356001600160a01b03811681036104a55790565b60206104f98183016104d8565b60406105068185016104d8565b91610513606086016104d8565b94610520608082016104d8565b9361052d60a083016104d8565b91610100916101209384830135601e19843603018112156104a55783019788359067ffffffffffffffff998a83116104a5578b81019280360384136104a557601f19908b5191603f81601f84011601168201928d83851090851117610624578e938d52818352838301938236920101116104a5578d816000928e978637830101525190209782519b8c019c8d873590528c606060018060a01b03809881978280971690850152169101521660808c01521660a08a01521660c088015260c081013560e088015260e0810135828801520135908501526101409081850152835261016083019183831090831117610624575251902090565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f6cbdb1aa32be892744896cdac45e59ef94a3376a95d6a505047089ec0bee69a64736f6c63430008170033";

type MockLimitOrderProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLimitOrderProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLimitOrderProtocol__factory extends ContractFactory {
  constructor(...args: MockLimitOrderProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockLimitOrderProtocol & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockLimitOrderProtocol__factory {
    return super.connect(runner) as MockLimitOrderProtocol__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLimitOrderProtocolInterface {
    return new Interface(_abi) as MockLimitOrderProtocolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockLimitOrderProtocol {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockLimitOrderProtocol;
  }
}
